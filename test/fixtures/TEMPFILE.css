.potato {
  color: white;
  outline: brown;
}

@media (width > 600px) {
  .potato {
    float: left;
  }

  .potato:first{
    float: center;
  }
  
  .spud {
    @extend .potato;
    font-weight: bold;
    color: red;
  }
  .spud:first-child {
    background: purple;
  }
  .sputnik {
    @extend .spud;
    font-weight: normal;
    font-style: italic;
  }
}

.potato:first-child,
.potato:last-child {
  background: brown;
}

.potato::after li {
  background: pink;
}

#superfun::after li {
  background: gray;
}

#superfun {
  @extend .potato;
}

#dbag {
  @extend .spud;
  color: white;
}

.bar,
#baz,
div {
  @extend #superfun::after li;
}

.bravo {
  /*@extend %echo;*/
  color: blue;
  background: purple;
}
.charlie {
  @extend .bravo;
  color: red;
  background: orange;
}
.delta {
  @extend .charlie;
  color: green;
  background: gray;
}
%echo {
  color: green;
  background: lightgreen;
}
@define-placeholder devman {
  color: yellow;
}
/*TO DO!!!!!!!!!!!!!!!!

Stimulate to simulate some damned proper recursion (only edge case: when copying declarations)

*/

/* TESTS THAT NEED TO BE MADE ('~' means indirectly tested, # means added):
# Works with silent '%' selectors
# Works with existing rules at root
# @define doesn't work in anti-pattern, silent % does, direct does.
# Eliminates duplicate selectors on extended rules
# Removes otherwise empty code blocks
# Acts recursively (both directions thanks to 'living log' behavior)
# Targets pseudo classes and extends them with pseudo version of the extended
# Acts recursively on pseudo classes
~ Finds it's exisiting pseudo classes (shared scope) and pulls declarations into them when possible
# @extend finds it's existing pseudo classes (shared scope) and pulls, but continues to process the rest of the selectors in the target rule appropriately
~ @extend inside @media tacks onto those also inside the same @media
# @extend inside @media does a declaration pull for anything outside @media
# /\Correctly handles re-declarations, by ignoreing incoming via @extend (original overwrites)
# @extend in @media finds it's exisiting pseudo classes (shared scope) and pulls declarations into them when possible
# @extend inside @media pulls&creates for targeted pseudo classes outside @media
# @extend inside @media does a declaration pull from other @media blocks
# /\Correctly handles re-declarations, by ignoreing incoming via @extend (original overwrites)
~ @extend inside @media pulls&creates for targeted pseudo classes from other @media blocks
# Order of naming remains a predicatable add-to-tail fashion, and follows vertical order, then recursion in priority
*/